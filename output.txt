digraph G{
 rankdir=BT;
AppLauncher [shape="record"
label= "{AppLauncher|-watcher : java.nio.file.WatchService\l
-dir : java.nio.file.Path\l
-stop : boolean\l
-processes : java.util.List\l
-observers : java.util.ArrayList\l
+event : java.nio.file.WatchEvent\l
+child : java.nio.file.Path\l
|+ <init>(java.nio.file.Path) : void\l
+ registerObserver(problem.Observer) : void\l
+ removeObserver(problem.Observer) : void\l
+ notifyObservers() : void\l
+ run() : void\l
+ clearEverything() : void\l
+ stopGracefully() : void\l
+ isRunning() : boolean\l
+ getApplicationsCount() : int\l
+ main(java.lang.String[]) : void\l
}"
];
AppLauncher -> Thread[arrowhead="onormal", style="solid"];
AppLauncher -> Subject[arrowhead="onormal", style="dashed"];

CommandBehavior [shape="record"
 label= "{\<\<interface\>\>\nCommandBehavior|
|+ followThru(java.lang.String) : void\l
}"
];
CommandBehavior -> Object[arrowhead="onormal", style="solid"];

CreateEvent [shape="record"
label= "{CreateEvent|-eventName : java.lang.String\l
-file : java.nio.file.Path\l
-appLauncher : problem.AppLauncher\l
-commandBehavior : problem.CommandBehavior\l
-commandSelect : java.util.Map\l
|+ <init>(problem.AppLauncher) : void\l
+ populateCommands() : void\l
+ update(java.nio.file.WatchEvent,java.nio.file.Path) : void\l
}"
];
CreateEvent -> Object[arrowhead="onormal", style="solid"];
CreateEvent -> Observer[arrowhead="onormal", style="dashed"];

Explorer [shape="record"
label= "{Explorer||+ <init>() : void\l
+ followThru(java.lang.String) : void\l
}"
];
Explorer -> Object[arrowhead="onormal", style="solid"];
Explorer -> CommandBehavior[arrowhead="onormal", style="dashed"];

Note [shape="record"
label= "{Note||+ <init>() : void\l
+ followThru(java.lang.String) : void\l
}"
];
Note -> Object[arrowhead="onormal", style="solid"];
Note -> CommandBehavior[arrowhead="onormal", style="dashed"];

Observer [shape="record"
 label= "{\<\<interface\>\>\nObserver|
|+ update(java.nio.file.WatchEvent,java.nio.file.Path) : void\l
}"
];
Observer -> Object[arrowhead="onormal", style="solid"];

Paint [shape="record"
label= "{Paint||+ <init>() : void\l
+ followThru(java.lang.String) : void\l
}"
];
Paint -> Object[arrowhead="onormal", style="solid"];
Paint -> CommandBehavior[arrowhead="onormal", style="dashed"];

Subject [shape="record"
 label= "{\<\<interface\>\>\nSubject|
|+ registerObserver(problem.Observer) : void\l
+ removeObserver(problem.Observer) : void\l
+ notifyObservers() : void\l
}"
];
Subject -> Object[arrowhead="onormal", style="solid"];
}