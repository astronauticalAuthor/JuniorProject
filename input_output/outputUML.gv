digraph G{
 rankdir=BT;
ChocolateBoiler [shape="record"
color="blue"
label="{ChocolateBoiler\n\<\<Singleton\>\>|
-empty : boolean\l
-boiled : boolean\l
-chocolateBoiler : ChocolateBoiler\l
|+ChocolateBoiler() : void\l
+getInstance() : ChocolateBoiler\l
+fill() : void\l
+drain() : void\l
+boil() : void\l
+isEmpty() : boolean\l
+isBoiled() : boolean\l
}"
];
ChocolateBoiler -> ChocolateBoiler[arrowhead="ovee", style="solid"];
AssocArrow [shape="record"
label="{AssocArrow|+sourceClass : String\l
+destinClass : String\l
+selfType : String\l
+additionalProps : String\l
|+AssocArrow() : void\l
+setSource(String) : void\l
+setDestination(String) : void\l
+toString() : String\l
+getSource() : String\l
+getDest() : String\l
+getSelf() : String\l
+addProperty(String) : void\l
}"
];
AssocArrow -> IArrow[arrowhead="onormal", style="dashed"];
ExtendArrow [shape="record"
label="{ExtendArrow|+sourceClass : String\l
+destinClass : String\l
+selfType : String\l
+additionalProps : String\l
|+ExtendArrow() : void\l
+setSource(String) : void\l
+setDestination(String) : void\l
+toString() : String\l
+getSource() : String\l
+getDest() : String\l
+getSelf() : String\l
+addProperty(String) : void\l
}"
];
ExtendArrow -> IArrow[arrowhead="onormal", style="dashed"];
ImplArrow [shape="record"
label="{ImplArrow|+sourceClass : String\l
+destinClass : String\l
+selfType : String\l
+additionalProps : String\l
|+ImplArrow() : void\l
+setSource(String) : void\l
+setDestination(String) : void\l
+toString() : String\l
+getSource() : String\l
+getDest() : String\l
+getSelf() : String\l
+addProperty(String) : void\l
}"
];
ImplArrow -> IArrow[arrowhead="onormal", style="dashed"];
UseArrow [shape="record"
label="{UseArrow|+sourceClass : String\l
+destinClass : String\l
+selfType : String\l
+additionalProps : String\l
|+UseArrow() : void\l
+setSource(String) : void\l
+setDestination(String) : void\l
+toString() : String\l
+getSource() : String\l
+getDest() : String\l
+getSelf() : String\l
+addProperty(String) : void\l
}"
];
UseArrow -> IArrow[arrowhead="onormal", style="dashed"];
AdapteeBehavior [shape="record"
label="{AdapteeBehavior||+AdapteeBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
AdapteeBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
AdapterBehavior [shape="record"
label="{AdapterBehavior||+AdapterBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
AdapterBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
ComponentBehavior [shape="record"
label="{ComponentBehavior||+ComponentBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
ComponentBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
CompositeBehavior [shape="record"
label="{CompositeBehavior||+CompositeBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
CompositeBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
CompositeComponentBehavior [shape="record"
label="{CompositeComponentBehavior||+CompositeComponentBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
CompositeComponentBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
DecoratorBehavior [shape="record"
label="{DecoratorBehavior||+DecoratorBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
DecoratorBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
InterfaceBehavior [shape="record"
label="{InterfaceBehavior|+recBehaviors : RecordBehaviorMap\l
|<clinit>() : void\l
+InterfaceBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
InterfaceBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
InterfaceBehavior -> RecordBehaviorMap[arrowhead="ovee", style="solid"];
LeafBehavior [shape="record"
label="{LeafBehavior||+LeafBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
LeafBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
NormBehavior [shape="record"
label="{NormBehavior||+NormBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
NormBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
SingletonBehavior [shape="record"
label="{SingletonBehavior||+SingletonBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
SingletonBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
TargetBehavior [shape="record"
label="{TargetBehavior||+TargetBehavior() : void\l
+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
TargetBehavior -> RecordBehavior[arrowhead="onormal", style="dashed"];
ChocolateBoiler [shape="record"
color="blue"
label="{ChocolateBoiler\n\<\<Singleton\>\>|
-empty : boolean\l
-boiled : boolean\l
-chocolateBoiler : ChocolateBoiler\l
|+ChocolateBoiler() : void\l
+getInstance() : ChocolateBoiler\l
+fill() : void\l
+drain() : void\l
+boil() : void\l
+isEmpty() : boolean\l
+isBoiled() : boolean\l
}"
];
ChocolateBoiler -> ChocolateBoiler[arrowhead="ovee", style="solid"];
ClassRep [shape="record"
label="{ClassRep|-className : String\l
-superClassName : String\l
-methods : ArrayList\l
-fields : ArrayList\l
-interfaces : ArrayList\l
-special : String\l
-arrows : ArrayList\l
-special2 : String\l
|+ClassRep() : void\l
+addMethod(IMethod) : void\l
+addField(IField) : void\l
+setName(String) : void\l
+setSuper(String) : void\l
+setInterfaces(String[]) : void\l
+getFields() : ArrayList\l
+getMethods() : ArrayList\l
+getInterfaces() : ArrayList\l
+getName() : String\l
+getSuper() : String\l
+setSpecial(String) : void\l
+getSpecial() : String\l
+getSpecial2() : String\l
+addArrow(IArrow) : void\l
+getArrows() : ArrayList\l
+accept(IVisitor) : void\l
}"
];
ClassRep -> IClass[arrowhead="onormal", style="dashed"];
ClassRep -> IMethod[arrowhead="ovee", style="solid"];
ClassRep -> IField[arrowhead="ovee", style="solid"];
ClassRep -> IArrow[arrowhead="ovee", style="solid"];
ClassRep -> IVisitor[arrowhead="ovee", style="dashed"];
ClassRep -> ITraverser[arrowhead="ovee", style="dashed"];
DetectionHandler [shape="record"
label="{DetectionHandler|-wrapper : IWrapper\l
|+DetectionHandler(IWrapper) : void\l
+detect() : void\l
+SingletonDetection() : void\l
+AdapterDetection() : void\l
+DecoratorDetection() : void\l
+CompositeDetection() : void\l
}"
];
DetectionHandler -> IWrapper[arrowhead="ovee", style="solid"];
DetectionHandler -> IWrapper[arrowhead="ovee", style="dashed"];
DetectionHandler -> DetectSingleton[arrowhead="ovee", style="dashed"];
DetectionHandler -> DetectAdapter[arrowhead="ovee", style="dashed"];
DetectionHandler -> DetectDecorator[arrowhead="ovee", style="dashed"];
DetectionHandler -> DetectComposite[arrowhead="ovee", style="dashed"];
Field [shape="record"
label="{Field|-fieldName : String\l
-fieldType : String\l
-access : String\l
-sign : String\l
-moreAccess : int\l
|+Field() : void\l
+setName(String) : void\l
+setType(String) : void\l
+setAccess(String) : void\l
+getName() : String\l
+getType() : String\l
+getAccess() : String\l
+setSignature(String) : void\l
+getSignature() : String\l
+accept(IVisitor) : void\l
+setAdditionalAccess(int) : void\l
+getAdditionalAccess() : int\l
}"
];
Field -> IField[arrowhead="onormal", style="dashed"];
Field -> IVisitor[arrowhead="ovee", style="dashed"];
JSONGenerator [shape="record"
label="{JSONGenerator|-singletons : List\l
-adapters : List\l
-decorators : List\l
-composites : List\l
|<clinit>() : void\l
+JSONGenerator() : void\l
+generate(IWrapper) : void\l
-fillLists(IWrapper) : void\l
}"
];
JSONGenerator -> IClass[arrowhead="ovee", style="solid"];
JSONGenerator -> IWrapper[arrowhead="ovee", style="dashed"];
Method [shape="record"
label="{Method|-methodName : String\l
-methodType : String\l
-parameters : ArrayList\l
-returnType : String\l
-access : String\l
-moreInfo : ArrayList\l
-moreAccess : int\l
|+Method() : void\l
+setName(String) : void\l
+setType(String) : void\l
+setReturnType(String) : void\l
+addParameter(String) : void\l
+getName() : String\l
+getType() : String\l
+getParameters() : ArrayList\l
+getReturnType() : String\l
+setAccess(String) : void\l
+getAccess() : String\l
+addInfo(MethodInformation) : void\l
+getInfo() : ArrayList\l
+accept(IVisitor) : void\l
+setAdditionalAccess(int) : void\l
+getAdditionalAccess() : int\l
}"
];
Method -> IMethod[arrowhead="onormal", style="dashed"];
Method -> MethodInformation[arrowhead="ovee", style="solid"];
Method -> MethodInformation[arrowhead="ovee", style="dashed"];
Method -> IVisitor[arrowhead="ovee", style="dashed"];
MethodInformation [shape="record"
label="{MethodInformation|+methodName : String\l
+arguments : String[]\l
+className : String\l
-desc : String\l
methods : ArrayList\l
classes : ArrayList\l
descriptions : ArrayList\l
currentClasses : ArrayList\l
returnTypes : ArrayList\l
|+MethodInformation() : void\l
+setDesc(String) : void\l
+getDesc() : String\l
+MethodInformation(String,String[],String) : void\l
+addNew(String,String,String,String,String) : void\l
+toString() : String\l
}"
];
MyWrapper [shape="record"
label="{MyWrapper|+classes : ArrayList\l
|+MyWrapper() : void\l
+accept(IVisitor) : void\l
+addClass(IClass) : void\l
+getClasses() : ArrayList\l
}"
];
MyWrapper -> IWrapper[arrowhead="onormal", style="dashed"];
MyWrapper -> IClass[arrowhead="ovee", style="solid"];
MyWrapper -> IVisitor[arrowhead="ovee", style="dashed"];
MyWrapper -> ITraverser[arrowhead="ovee", style="dashed"];
RecordBehaviorMap [shape="record"
label="{RecordBehaviorMap|+behaviors : Map\l
|+RecordBehaviorMap() : void\l
+getBeh(String) : RecordBehavior\l
}"
];
RecordBehaviorMap -> NormBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> InterfaceBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> SingletonBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> AdapterBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> AdapteeBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> TargetBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> ComponentBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> DecoratorBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> LeafBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> CompositeBehavior[arrowhead="ovee", style="dashed"];
RecordBehaviorMap -> CompositeComponentBehavior[arrowhead="ovee", style="dashed"];
UMLGenerator [shape="record"
label="{UMLGenerator|+recBehaviors : RecordBehaviorMap\l
|<clinit>() : void\l
+UMLGenerator() : void\l
+generate(IWrapper) : void\l
-destTest(IArrow) : boolean\l
}"
];
UMLGenerator -> RecordBehaviorMap[arrowhead="ovee", style="solid"];
UMLGenerator -> IWrapper[arrowhead="ovee", style="dashed"];
UMLGenerator -> RecordBehavior[arrowhead="ovee", style="dashed"];
Visitor$LookupKey [shape="record"
label="{Visitor$LookupKey|type : VisitType\l
clazz : Class\l
this$0 : Visitor\l
|+Visitor$LookupKey(Visitor,VisitType,Class) : void\l
+hashCode() : int\l
+equals(Object) : boolean\l
}"
];
Visitor$LookupKey -> VisitType[arrowhead="ovee", style="solid"];
Visitor$LookupKey -> Visitor[arrowhead="ovee", style="solid"];
Visitor$LookupKey -> Visitor[arrowhead="ovee", style="dashed"];
Visitor$LookupKey -> VisitType[arrowhead="ovee", style="dashed"];
Visitor [shape="record"
label="{Visitor|keyToMethodMap : Map\l
|+Visitor() : void\l
+preVisit(ITraverser) : void\l
+visit(ITraverser) : void\l
+postVisit(ITraverser) : void\l
+addVisit(VisitType,Class,ICommand) : void\l
+removeVisit(VisitType,Class) : void\l
}"
];
Visitor -> IVisitor[arrowhead="onormal", style="dashed"];
Visitor -> Visitor$LookupKey[arrowhead="ovee", style="solid"];
Visitor -> ITraverser[arrowhead="ovee", style="dashed"];
Visitor -> ICommand[arrowhead="ovee", style="dashed"];
Visitor -> VisitType[arrowhead="ovee", style="dashed"];
Config [shape="record"
label="{Config|+INPUTDIR : String\l
+CLASSES : List\l
+OUTDIR : String\l
+DOTPATH : String\l
+PHASES : List\l
+adapterMethodDelegation : int\l
|+Config() : void\l
+getInputDir() : String\l
+setInputDir(String) : void\l
+getClasses() : List\l
+setClasses(List) : void\l
+getOutDir() : String\l
+setOutDir(String) : void\l
+getDotPath() : String\l
+setDotPath(String) : void\l
+getPhases() : List\l
+setPhases(List) : void\l
+getAdapterMethodDelegation() : int\l
+setAdapterMethodDelegation(int) : void\l
}"
];
ConfigParser [shape="record"
label="{ConfigParser||+ConfigParser() : void\l
+parse(String) : Config\l
}"
];
ConfigParser -> Config[arrowhead="ovee", style="dashed"];
Loader [shape="record"
label="{Loader||+Loader() : void\l
+main(String[]) : void\l
+loadFile(String) : void\l
}"
];
DetectAdapter$AdapterTriple [shape="record"
label="{DetectAdapter$AdapterTriple|+a1 : String\l
+a2 : String\l
+tar : String\l
this$0 : DetectAdapter\l
|+DetectAdapter$AdapterTriple(DetectAdapter,String,String,String) : void\l
+getA1() : String\l
+getA2() : String\l
+getTar() : String\l
}"
];
DetectAdapter$AdapterTriple -> DetectAdapter[arrowhead="ovee", style="solid"];
DetectAdapter$AdapterTriple -> DetectAdapter[arrowhead="ovee", style="dashed"];
DetectAdapter [shape="record"
label="{DetectAdapter|-visitor : IVisitor\l
-classes : ArrayList\l
-curClass : IClass\l
-superClass : String\l
-uniFieldClass : IClass\l
-triples : ArrayList\l
|+DetectAdapter() : void\l
-fieldVisit() : void\l
-methodVisit() : void\l
-classVisit() : void\l
+detect(IWrapper) : void\l
+setupPreVisit() : void\l
+postVisit() : void\l
-lambda$0(ITraverser) : void\l
-lambda$1(ITraverser) : void\l
-lambda$2(ITraverser) : void\l
-lambda$3(ITraverser) : void\l
-lambda$4(ITraverser) : void\l
}"
];
DetectAdapter -> IDetector[arrowhead="onormal", style="dashed"];
DetectAdapter -> IVisitor[arrowhead="ovee", style="solid"];
DetectAdapter -> IClass[arrowhead="ovee", style="solid"];
DetectAdapter -> DetectAdapter$AdapterTriple[arrowhead="ovee", style="solid"];
DetectAdapter -> Visitor[arrowhead="ovee", style="dashed"];
DetectAdapter -> IWrapper[arrowhead="ovee", style="dashed"];
DetectAdapter -> ITraverser[arrowhead="ovee", style="dashed"];
DetectComposite [shape="record"
label="{DetectComposite|-visitor : IVisitor\l
-classes : ArrayList\l
-currentClass : IClass\l
-superClazz : IClass\l
-hasDSComponent : boolean\l
-components : List\l
-composites : List\l
-hasMethodCount : int\l
|+DetectComposite() : void\l
-fieldVisit() : void\l
-methodVisit() : void\l
+detect(IWrapper) : void\l
+setupPreVisit() : void\l
+postVisit() : void\l
-lambda$0(ITraverser) : void\l
-lambda$1(ITraverser) : void\l
-lambda$2(ITraverser) : void\l
-lambda$3(ITraverser) : void\l
}"
];
DetectComposite -> IDetector[arrowhead="onormal", style="dashed"];
DetectComposite -> IVisitor[arrowhead="ovee", style="solid"];
DetectComposite -> IClass[arrowhead="ovee", style="solid"];
DetectComposite -> Visitor[arrowhead="ovee", style="dashed"];
DetectComposite -> IWrapper[arrowhead="ovee", style="dashed"];
DetectComposite -> ITraverser[arrowhead="ovee", style="dashed"];
DetectDecorator [shape="record"
label="{DetectDecorator|-visitor : IVisitor\l
-currentClass : IClass\l
-interfaces : ArrayList\l
-currentSuper : String\l
-isAbstract : boolean\l
-isDecorator : boolean\l
-decorators : ArrayList\l
-components : ArrayList\l
|+DetectDecorator() : void\l
-visitField() : void\l
+setupPreVisit() : void\l
+detect(IWrapper) : void\l
+postVisit() : void\l
-lambda$0(ITraverser) : void\l
-lambda$1(ITraverser) : void\l
-lambda$2(ITraverser) : void\l
}"
];
DetectDecorator -> IDetector[arrowhead="onormal", style="dashed"];
DetectDecorator -> IVisitor[arrowhead="ovee", style="solid"];
DetectDecorator -> IClass[arrowhead="ovee", style="solid"];
DetectDecorator -> Visitor[arrowhead="ovee", style="dashed"];
DetectDecorator -> ITraverser[arrowhead="ovee", style="dashed"];
DetectDecorator -> IWrapper[arrowhead="ovee", style="dashed"];
DetectSingleton [shape="record"
label="{DetectSingleton|-visitor : IVisitor\l
-curClass : IClass\l
-methodInstance : boolean\l
-fieldInstance : boolean\l
|+DetectSingleton() : void\l
-fieldVisit() : void\l
-methodVisit() : void\l
+detect(IWrapper) : void\l
+setupPreVisit() : void\l
+postVisit() : void\l
-lambda$0(ITraverser) : void\l
-lambda$1(ITraverser) : void\l
-lambda$2(ITraverser) : void\l
-lambda$3(ITraverser) : void\l
}"
];
DetectSingleton -> IDetector[arrowhead="onormal", style="dashed"];
DetectSingleton -> IVisitor[arrowhead="ovee", style="solid"];
DetectSingleton -> IClass[arrowhead="ovee", style="solid"];
DetectSingleton -> Visitor[arrowhead="ovee", style="dashed"];
DetectSingleton -> ITraverser[arrowhead="ovee", style="dashed"];
DetectSingleton -> IWrapper[arrowhead="ovee", style="dashed"];
DetectSingleton -> AssocArrow[arrowhead="ovee", style="dashed"];
IArrow [shape="record"
label="{\<\<interface\>\>\nIArrow|
|+setSource(String) : void\l
+setDestination(String) : void\l
+toString() : String\l
+getSource() : String\l
+getDest() : String\l
+getSelf() : String\l
+addProperty(String) : void\l
}"
];
IClass [shape="record"
label="{\<\<interface\>\>\nIClass|
|+addMethod(IMethod) : void\l
+addField(IField) : void\l
+setName(String) : void\l
+setSuper(String) : void\l
+setInterfaces(String[]) : void\l
+getName() : String\l
+getSuper() : String\l
+getFields() : ArrayList\l
+getMethods() : ArrayList\l
+getInterfaces() : ArrayList\l
+addArrow(IArrow) : void\l
+getArrows() : ArrayList\l
+setSpecial(String) : void\l
+getSpecial() : String\l
+getSpecial2() : String\l
}"
];
IClass -> ITraverser[arrowhead="onormal", style="dashed"];
ICommand [shape="record"
label="{\<\<interface\>\>\nICommand|
|+execute(ITraverser) : void\l
}"
];
IDetector [shape="record"
label="{\<\<interface\>\>\nIDetector|
|+detect(IWrapper) : void\l
+setupPreVisit() : void\l
+postVisit() : void\l
}"
];
IField [shape="record"
label="{\<\<interface\>\>\nIField|
|+setName(String) : void\l
+setType(String) : void\l
+setAccess(String) : void\l
+getName() : String\l
+getType() : String\l
+getAccess() : String\l
+setSignature(String) : void\l
+getSignature() : String\l
+setAdditionalAccess(int) : void\l
+getAdditionalAccess() : int\l
}"
];
IField -> ITraverser[arrowhead="onormal", style="dashed"];
IMethod [shape="record"
label="{\<\<interface\>\>\nIMethod|
|+setName(String) : void\l
+setType(String) : void\l
+setReturnType(String) : void\l
+addParameter(String) : void\l
+getName() : String\l
+getType() : String\l
+getParameters() : ArrayList\l
+getReturnType() : String\l
+setAccess(String) : void\l
+getAccess() : String\l
+addInfo(MethodInformation) : void\l
+getInfo() : ArrayList\l
+setAdditionalAccess(int) : void\l
+getAdditionalAccess() : int\l
}"
];
IMethod -> ITraverser[arrowhead="onormal", style="dashed"];
ITraverser [shape="record"
label="{\<\<interface\>\>\nITraverser|
|+accept(IVisitor) : void\l
}"
];
IVisitor [shape="record"
label="{\<\<interface\>\>\nIVisitor|
|+preVisit(ITraverser) : void\l
+visit(ITraverser) : void\l
+postVisit(ITraverser) : void\l
+addVisit(VisitType,Class,ICommand) : void\l
+removeVisit(VisitType,Class) : void\l
}"
];
IWrapper [shape="record"
label="{\<\<interface\>\>\nIWrapper|
|+addClass(IClass) : void\l
+getClasses() : ArrayList\l
}"
];
IWrapper -> ITraverser[arrowhead="onormal", style="dashed"];
RecordBehavior [shape="record"
label="{\<\<interface\>\>\nRecordBehavior|
|+initRecord(String,PrintWriter,IClass) : void\l
+recMods(PrintWriter) : void\l
+secondaryLabel(PrintWriter) : void\l
}"
];
VisitType [shape="record"
color="blue"
label="{VisitType\n\<\<Singleton\>\>|
+PREVISIT : VisitType\l
+VISIT : VisitType\l
+POSTVISIT : VisitType\l
-ENUM$VALUES : VisitType[]\l
|<clinit>() : void\l
-VisitType(String,int) : void\l
+values() : VisitType[]\l
+valueOf(String) : VisitType\l
}"
];
VisitType -> Enum[arrowhead="onormal", style="solid"];
VisitType -> VisitType[arrowhead="ovee", style="solid"];
ClassDeclarationVisitor [shape="record"
label="{ClassDeclarationVisitor|+currentClass : IClass\l
+classes : String[]\l
|+ClassDeclarationVisitor(int,IClass,String[]) : void\l
+ClassDeclarationVisitor(int,IClass) : void\l
+ClassDeclarationVisitor(int,IClass,List) : void\l
+visit(int,int,String,String,String,String[]) : void\l
}"
];
ClassDeclarationVisitor -> ClassVisitor[arrowhead="onormal", style="solid"];
ClassDeclarationVisitor -> IClass[arrowhead="ovee", style="solid"];
ClassDeclarationVisitor -> ExtendArrow[arrowhead="ovee", style="dashed"];
ClassDeclarationVisitor -> ImplArrow[arrowhead="ovee", style="dashed"];
ClassFieldVisitor [shape="record"
label="{ClassFieldVisitor|+currentClass : IClass\l
+currentField : IField\l
+classes : String[]\l
|+ClassFieldVisitor(int,ClassVisitor,IClass,String[]) : void\l
+ClassFieldVisitor(int,ClassDeclarationVisitor,IClass) : void\l
+ClassFieldVisitor(int,ClassDeclarationVisitor,IClass,List) : void\l
+visitField(int,String,String,String,Object) : FieldVisitor\l
}"
];
ClassFieldVisitor -> ClassVisitor[arrowhead="onormal", style="solid"];
ClassFieldVisitor -> IClass[arrowhead="ovee", style="solid"];
ClassFieldVisitor -> IField[arrowhead="ovee", style="solid"];
ClassFieldVisitor -> ClassDeclarationVisitor[arrowhead="ovee", style="dashed"];
ClassFieldVisitor -> Field[arrowhead="ovee", style="dashed"];
ClassFieldVisitor -> AssocArrow[arrowhead="ovee", style="dashed"];
ClassMethodVisitor [shape="record"
label="{ClassMethodVisitor|+currentClass : IClass\l
+currentMethod : IMethod\l
+classes : String[]\l
+methodInformation : MethodInformation\l
level : int\l
|+ClassMethodVisitor(int,ClassVisitor,IClass,String[]) : void\l
+ClassMethodVisitor(int,ClassVisitor,ClassRep,MethodInformation,int) : void\l
+ClassMethodVisitor(int,ClassVisitor,IClass) : void\l
+ClassMethodVisitor(int,ClassFieldVisitor,IClass,List) : void\l
+visitMethod(int,String,String,String,String[]) : MethodVisitor\l
}"
];
ClassMethodVisitor -> ClassVisitor[arrowhead="onormal", style="solid"];
ClassMethodVisitor -> IClass[arrowhead="ovee", style="solid"];
ClassMethodVisitor -> IMethod[arrowhead="ovee", style="solid"];
ClassMethodVisitor -> MethodInformation[arrowhead="ovee", style="solid"];
ClassMethodVisitor -> ClassRep[arrowhead="ovee", style="dashed"];
ClassMethodVisitor -> MethodInformation[arrowhead="ovee", style="dashed"];
ClassMethodVisitor -> ClassFieldVisitor[arrowhead="ovee", style="dashed"];
ClassMethodVisitor -> MethodInformationVisitor[arrowhead="ovee", style="dashed"];
ClassMethodVisitor -> Method[arrowhead="ovee", style="dashed"];
ClassMethodVisitor -> MethodTraverser[arrowhead="ovee", style="dashed"];
DesignParser [shape="record"
label="{DesignParser|-DirFiles : List\l
|+DesignParser() : void\l
+main(String[]) : void\l
-retrieveFiles(File) : void\l
}"
];
DesignParser -> ConfigParser[arrowhead="ovee", style="dashed"];
DesignParser -> Config[arrowhead="ovee", style="dashed"];
DesignParser -> MyWrapper[arrowhead="ovee", style="dashed"];
DesignParser -> IDetector[arrowhead="ovee", style="dashed"];
DesignParser -> ClassRep[arrowhead="ovee", style="dashed"];
DesignParser -> ClassDeclarationVisitor[arrowhead="ovee", style="dashed"];
DesignParser -> ClassFieldVisitor[arrowhead="ovee", style="dashed"];
DesignParser -> ClassMethodVisitor[arrowhead="ovee", style="dashed"];
DesignParser -> IWrapper[arrowhead="ovee", style="dashed"];
DesignParser -> JSONGenerator[arrowhead="ovee", style="dashed"];
DesignParser -> UMLGenerator[arrowhead="ovee", style="dashed"];
MethodInformationVisitor [shape="record"
fillcolor="green"
style="filled"
label="{MethodInformationVisitor\n\<\<decorator\>\>
|
methodVisitor : MethodVisitor\l
methodInformation : MethodInformation\l
level : int\l
|+MethodInformationVisitor(int,MethodVisitor,MethodInformation,int) : void\l
+MethodInformationVisitor(int,MethodInformation,int) : void\l
+visitMethodInsn(int,String,String,String,boolean) : void\l
}"
];
MethodInformationVisitor -> MethodVisitor[arrowhead="onormal", style="solid"];
MethodInformationVisitor -> MethodInformation[arrowhead="ovee", style="solid"];
MethodInformationVisitor -> MethodInformation[arrowhead="ovee", style="dashed"];
MethodInformationVisitor -> ClassRep[arrowhead="ovee", style="dashed"];
MethodInformationVisitor -> ClassDeclarationVisitor[arrowhead="ovee", style="dashed"];
MethodInformationVisitor -> ClassMethodVisitor[arrowhead="ovee", style="dashed"];
MethodTraverser [shape="record"
label="{MethodTraverser|+currentMethod : IMethod\l
+currentClass : IClass\l
+classes : String[]\l
|+MethodTraverser(int,Method) : void\l
+MethodTraverser(int,MethodVisitor,IClass,IMethod,String[]) : void\l
+visitMethodInsn(int,String,String,String,boolean) : void\l
}"
];
MethodTraverser -> MethodVisitor[arrowhead="onormal", style="solid"];
MethodTraverser -> IMethod[arrowhead="ovee", style="solid"];
MethodTraverser -> IClass[arrowhead="ovee", style="solid"];
MethodTraverser -> Method[arrowhead="ovee", style="dashed"];
MethodTraverser -> UseArrow[arrowhead="ovee", style="dashed"];
PhaseMap [shape="record"
label="{PhaseMap|+phases : Map\l
|<clinit>() : void\l
+PhaseMap() : void\l
}"
];
PhaseMap -> DetectDecorator[arrowhead="ovee", style="dashed"];
PhaseMap -> DetectSingleton[arrowhead="ovee", style="dashed"];
PhaseMap -> DetectAdapter[arrowhead="ovee", style="dashed"];
PhaseMap -> DetectComposite[arrowhead="ovee", style="dashed"];
AbstractDecorator [shape="record"
fillcolor="green"
style="filled"
label="{AbstractDecorator\n\<\<decorator\>\>
|
c : IComponent\l
|+AbstractDecorator() : void\l
+method1() : void\l
+method2() : void\l
}"
];
AbstractDecorator -> IComponent[arrowhead="onormal", style="dashed"];
AbstractDecorator -> IComponent[arrowhead="ovee", style="solid"xlabel="\<\<decorates\>\>"];
Adaptee [shape="record"
label="{Adaptee||+Adaptee() : void\l
+m1() : void\l
+m2() : void\l
+m3() : void\l
}"
];
Adapter [shape="record"
label="{Adapter|a : Adaptee\l
|+Adapter() : void\l
+method1() : void\l
+method2() : void\l
}"
];
Adapter -> Adaptee[arrowhead="ovee", style="solid"];
ConcreteDecorator [shape="record"
fillcolor="green"
style="filled"
label="{ConcreteDecorator\n\<\<decorator\>\>
|
|+ConcreteDecorator() : void\l
+method1() : void\l
+method2() : void\l
}"
];
ConcreteDecorator -> AbstractDecorator[arrowhead="onormal", style="solid"];
EagerSingletonTest [shape="record"
color="blue"
label="{EagerSingletonTest\n\<\<Singleton\>\>|
e : EagerSingletonTest\l
|<clinit>() : void\l
+EagerSingletonTest() : void\l
+getInstance() : EagerSingletonTest\l
}"
];
EagerSingletonTest -> EagerSingletonTest[arrowhead="ovee", style="solid"];
IComponent [shape="record"
fillcolor="green"
style="filled"
label="{\<\<interface\>\>\nIComponent
\<\<Component\>\>
|
|+method1() : void\l
+method2() : void\l
}"
];
ITarget [shape="record"
label="{\<\<interface\>\>\nITarget|
|+method1() : void\l
+method2() : void\l
}"
];
LeafA [shape="record"
fillcolor="yellow"
style="filled"
label="{LeafA\n\<\<Leaf\>\>
|
|+LeafA() : void\l
+method1() : void\l
+method2() : void\l
+method3() : void\l
}"
];
LeafA -> MyComponent[arrowhead="onormal", style="solid"];
LeafB [shape="record"
fillcolor="yellow"
style="filled"
label="{LeafB\n\<\<Leaf\>\>
|
|+LeafB() : void\l
+method1() : void\l
+method2() : void\l
+method4() : void\l
}"
];
LeafB -> MyComponent[arrowhead="onormal", style="solid"];
MyComponent [shape="record"
fillcolor="yellow"
style="filled"
label="{MyComponent\n\<\<Component\>\>
|
|+MyComponent() : void\l
+add(MyComponent) : void\l
+method1() : void\l
+method2() : void\l
+remove(MyComponent) : void\l
}"
];
MyComposite [shape="record"
fillcolor="yellow"
style="filled"
label="{MyComposite\n\<\<Composite\>\>
|
comps : ArrayList\l
|+MyComposite() : void\l
+add(MyComponent) : void\l
+method1() : void\l
+remove(MyComponent) : void\l
}"
];
MyComposite -> MyComponent[arrowhead="onormal", style="solid"];
MyComposite -> MyComponent[arrowhead="ovee", style="solid"];
MyComposite -> MyComponent[arrowhead="ovee", style="dashed"];
SingletonTest1 [shape="record"
color="blue"
label="{SingletonTest1\n\<\<Singleton\>\>|
+s : SingletonTest1\l
|+SingletonTest1() : void\l
+getInstance() : SingletonTest1\l
}"
];
SingletonTest1 -> SingletonTest1[arrowhead="ovee", style="solid"];
SingletonTest2 [shape="record"
label="{SingletonTest2|+test : SingletonTest2\l
|<clinit>() : void\l
+SingletonTest2() : void\l
}"
];
SingletonTest2 -> SingletonTest2[arrowhead="ovee", style="solid"];
SingletonTest3 [shape="record"
label="{SingletonTest3||+SingletonTest3() : void\l
+getInstance() : SingletonTest3\l
}"
];
TestAssociation [shape="record"
label="{TestAssociation||+TestAssociation() : void\l
}"
];
TestClass [shape="record"
label="{TestClass|var1 : int\l
var2 : int\l
var3 : String\l
|+TestClass() : void\l
+testMethod1() : void\l
+testMethod2(String) : void\l
+testMethod3(int) : String\l
+thisIsAReallyLongMethod(String,int,double,float) : void\l
}"
];
TestClass -> TestInterface[arrowhead="onormal", style="dashed"];
TestInterface [shape="record"
label="{\<\<interface\>\>\nTestInterface|
}"
];
TestUse [shape="record"
label="{TestUse||+TestUse() : void\l
}"
];
TestUseAndAssociation [shape="record"
label="{TestUseAndAssociation|ta : TestAssociation\l
|+TestUseAndAssociation() : void\l
+method1() : TestUse\l
+method2(TestUse) : void\l
}"
];
TestUseAndAssociation -> TestAssociation[arrowhead="ovee", style="solid"];
TestUseAndAssociation -> TestUse[arrowhead="ovee", style="dashed"];
VisitorTest [shape="record"
label="{VisitorTest||+VisitorTest() : void\l
+testClassDeclarationVisitor() : void\l
+testClassFieldVisitor() : void\l
+testClassMethodVisitor() : void\l
+testUsesAndAssociations() : void\l
+testSequenceDiagram() : void\l
+fakeMain(String[]) : IWrapper\l
+testMilestone5Cases() : void\l
+testDetectAdapter() : void\l
+testDetectDecorator() : void\l
+milestone6Cases() : void\l
+testDetectComposite() : void\l
}"
];
}